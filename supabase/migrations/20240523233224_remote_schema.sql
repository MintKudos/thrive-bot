create extension if not exists "vector" with schema "public" version '0.7.0';

create table "public"."event_facts" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "event" bigint not null,
    "category" character varying default ''::character varying,
    "fact" text not null,
    "userid" character varying not null,
    "username" character varying,
    "verified" boolean not null default false,
    "views" integer default 0,
    "embedding" halfvec(1536),
    "fts" tsvector generated always as (to_tsvector('english'::regconfig, fact)) stored
);


alter table "public"."event_facts" enable row level security;

create table "public"."events" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "name" text not null,
    "overview" text,
    "schedule" text,
    "address" text,
    "admins" text
);


alter table "public"."events" enable row level security;

create table "public"."profiles" (
    "id" bigint generated by default as identity not null,
    "created_at" timestamp with time zone not null default now(),
    "userid" character varying not null,
    "profile" text,
    "embedding" halfvec(1536),
    "data" jsonb,
    "event_ctx" text,
    "fts" tsvector generated always as (to_tsvector('english'::regconfig, profile)) stored
);


alter table "public"."profiles" enable row level security;

create table "public"."profiles_login_wip" (
    "id" uuid not null,
    "updated_at" timestamp with time zone,
    "username" text,
    "full_name" text,
    "avatar_url" text,
    "embeddings" vector(384)
);


alter table "public"."profiles_login_wip" enable row level security;

CREATE UNIQUE INDEX event_name_key ON public.events USING btree (name);

CREATE UNIQUE INDEX event_pkey ON public.events USING btree (id);

CREATE INDEX events_event_category_idx ON public.event_facts USING btree (event, category);

CREATE INDEX events_event_idx ON public.event_facts USING btree (event);

CREATE UNIQUE INDEX events_id_key ON public.event_facts USING btree (id);

CREATE UNIQUE INDEX events_pkey ON public.event_facts USING btree (id);

CREATE INDEX events_userid_idx ON public.event_facts USING btree (userid);

CREATE UNIQUE INDEX matches_pkey ON public.profiles USING btree (id);

CREATE UNIQUE INDEX profiles_pkey1 ON public.profiles_login_wip USING btree (id);

CREATE UNIQUE INDEX profiles_username_key ON public.profiles_login_wip USING btree (username);

alter table "public"."event_facts" add constraint "events_pkey" PRIMARY KEY using index "events_pkey";

alter table "public"."events" add constraint "event_pkey" PRIMARY KEY using index "event_pkey";

alter table "public"."profiles" add constraint "matches_pkey" PRIMARY KEY using index "matches_pkey";

alter table "public"."profiles_login_wip" add constraint "profiles_pkey1" PRIMARY KEY using index "profiles_pkey1";

alter table "public"."event_facts" add constraint "event_facts_event_fkey" FOREIGN KEY (event) REFERENCES events(id) ON UPDATE CASCADE ON DELETE CASCADE not valid;

alter table "public"."event_facts" validate constraint "event_facts_event_fkey";

alter table "public"."event_facts" add constraint "events_id_key" UNIQUE using index "events_id_key";

alter table "public"."events" add constraint "event_name_key" UNIQUE using index "event_name_key";

alter table "public"."profiles_login_wip" add constraint "profiles_id_fkey" FOREIGN KEY (id) REFERENCES auth.users(id) not valid;

alter table "public"."profiles_login_wip" validate constraint "profiles_id_fkey";

alter table "public"."profiles_login_wip" add constraint "profiles_username_key" UNIQUE using index "profiles_username_key";

alter table "public"."profiles_login_wip" add constraint "username_length" CHECK ((char_length(username) >= 3)) not valid;

alter table "public"."profiles_login_wip" validate constraint "username_length";

set check_function_bodies = off;

CREATE OR REPLACE FUNCTION public.handle_new_user()
 RETURNS trigger
 LANGUAGE plpgsql
 SECURITY DEFINER
AS $function$
begin
  insert into public.profiles (id, full_name, avatar_url)
  values (new.id, new.raw_user_meta_data->>'full_name', new.raw_user_meta_data->>'avatar_url');
  return new;
end;
$function$
;

grant delete on table "public"."event_facts" to "anon";

grant insert on table "public"."event_facts" to "anon";

grant references on table "public"."event_facts" to "anon";

grant select on table "public"."event_facts" to "anon";

grant trigger on table "public"."event_facts" to "anon";

grant truncate on table "public"."event_facts" to "anon";

grant update on table "public"."event_facts" to "anon";

grant delete on table "public"."event_facts" to "authenticated";

grant insert on table "public"."event_facts" to "authenticated";

grant references on table "public"."event_facts" to "authenticated";

grant select on table "public"."event_facts" to "authenticated";

grant trigger on table "public"."event_facts" to "authenticated";

grant truncate on table "public"."event_facts" to "authenticated";

grant update on table "public"."event_facts" to "authenticated";

grant delete on table "public"."event_facts" to "service_role";

grant insert on table "public"."event_facts" to "service_role";

grant references on table "public"."event_facts" to "service_role";

grant select on table "public"."event_facts" to "service_role";

grant trigger on table "public"."event_facts" to "service_role";

grant truncate on table "public"."event_facts" to "service_role";

grant update on table "public"."event_facts" to "service_role";

grant delete on table "public"."events" to "anon";

grant insert on table "public"."events" to "anon";

grant references on table "public"."events" to "anon";

grant select on table "public"."events" to "anon";

grant trigger on table "public"."events" to "anon";

grant truncate on table "public"."events" to "anon";

grant update on table "public"."events" to "anon";

grant delete on table "public"."events" to "authenticated";

grant insert on table "public"."events" to "authenticated";

grant references on table "public"."events" to "authenticated";

grant select on table "public"."events" to "authenticated";

grant trigger on table "public"."events" to "authenticated";

grant truncate on table "public"."events" to "authenticated";

grant update on table "public"."events" to "authenticated";

grant delete on table "public"."events" to "service_role";

grant insert on table "public"."events" to "service_role";

grant references on table "public"."events" to "service_role";

grant select on table "public"."events" to "service_role";

grant trigger on table "public"."events" to "service_role";

grant truncate on table "public"."events" to "service_role";

grant update on table "public"."events" to "service_role";

grant delete on table "public"."profiles" to "anon";

grant insert on table "public"."profiles" to "anon";

grant references on table "public"."profiles" to "anon";

grant select on table "public"."profiles" to "anon";

grant trigger on table "public"."profiles" to "anon";

grant truncate on table "public"."profiles" to "anon";

grant update on table "public"."profiles" to "anon";

grant delete on table "public"."profiles" to "authenticated";

grant insert on table "public"."profiles" to "authenticated";

grant references on table "public"."profiles" to "authenticated";

grant select on table "public"."profiles" to "authenticated";

grant trigger on table "public"."profiles" to "authenticated";

grant truncate on table "public"."profiles" to "authenticated";

grant update on table "public"."profiles" to "authenticated";

grant delete on table "public"."profiles" to "service_role";

grant insert on table "public"."profiles" to "service_role";

grant references on table "public"."profiles" to "service_role";

grant select on table "public"."profiles" to "service_role";

grant trigger on table "public"."profiles" to "service_role";

grant truncate on table "public"."profiles" to "service_role";

grant update on table "public"."profiles" to "service_role";

grant delete on table "public"."profiles_login_wip" to "anon";

grant insert on table "public"."profiles_login_wip" to "anon";

grant references on table "public"."profiles_login_wip" to "anon";

grant select on table "public"."profiles_login_wip" to "anon";

grant trigger on table "public"."profiles_login_wip" to "anon";

grant truncate on table "public"."profiles_login_wip" to "anon";

grant update on table "public"."profiles_login_wip" to "anon";

grant delete on table "public"."profiles_login_wip" to "authenticated";

grant insert on table "public"."profiles_login_wip" to "authenticated";

grant references on table "public"."profiles_login_wip" to "authenticated";

grant select on table "public"."profiles_login_wip" to "authenticated";

grant trigger on table "public"."profiles_login_wip" to "authenticated";

grant truncate on table "public"."profiles_login_wip" to "authenticated";

grant update on table "public"."profiles_login_wip" to "authenticated";

grant delete on table "public"."profiles_login_wip" to "service_role";

grant insert on table "public"."profiles_login_wip" to "service_role";

grant references on table "public"."profiles_login_wip" to "service_role";

grant select on table "public"."profiles_login_wip" to "service_role";

grant trigger on table "public"."profiles_login_wip" to "service_role";

grant truncate on table "public"."profiles_login_wip" to "service_role";

grant update on table "public"."profiles_login_wip" to "service_role";

create policy "Public profiles are viewable by everyone."
on "public"."profiles_login_wip"
as permissive
for select
to public
using (true);


create policy "Users can insert their own profile."
on "public"."profiles_login_wip"
as permissive
for insert
to public
with check ((auth.uid() = id));


create policy "Users can update own profile."
on "public"."profiles_login_wip"
as permissive
for update
to public
using ((auth.uid() = id));



